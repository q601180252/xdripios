name: Build xDrip iOS IPA

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
      upload_to_testflight:
        description: 'Upload to TestFlight'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_TEAM_ID: 7RV2Y67HF6
  BUNDLE_IDENTIFIER: com.7RV2Y67HF6.xdripswiftt1li23
  APP_GROUP_IDENTIFIER: group.com.7RV2Y67HF6.loopkit.LoopGroup

jobs:
  build-ipa:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0
        bundler-cache: true
        
    - name: Install dependencies
      run: |
        gem install bundler:2.4.19
        bundle install
        
    - name: Resolve Package Dependencies
      run: |
        xcodebuild -workspace xdrip.xcworkspace -scheme xdrip -resolvePackageDependencies
        
    - name: Setup App Store Connect API Key
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      run: |
        # 创建 App Store Connect API Key 目录
        mkdir -p ~/private_keys
        
        # 保存 API Key
        echo "$API_PRIVATE_KEY" > ~/private_keys/AuthKey_$API_KEY_ID.p8
        
        # 设置文件权限
        chmod 600 ~/private_keys/AuthKey_$API_KEY_ID.p8
        
        # 创建 API Key JSON 配置
        cat > ~/private_keys/api_key.json <<EOF
        {
          "key_id": "$API_KEY_ID",
          "issuer_id": "$API_ISSUER_ID",
          "key": "~/private_keys/AuthKey_$API_KEY_ID.p8"
        }
        EOF
        
    - name: Import Code Signing Certificate
      env:
        P12_BASE64: ${{ secrets.CERTIFICATES_P12 }}
        P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      run: |
        # 创建证书目录
        mkdir -p ~/certificates
        
        # 解码并保存证书
        echo "$P12_BASE64" | base64 --decode > ~/certificates/certificate.p12
        
        # 创建临时 keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # 导入证书到 keychain
        security import ~/certificates/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
        
        # 设置证书访问权限
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # 显示可用的代码签名身份
        security find-identity -v -p codesigning
        
    - name: Download Provisioning Profiles
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        # 使用 Fastlane 下载配置文件
        bundle exec fastlane run download_provisioning_profiles \
          api_key_path:~/private_keys/AuthKey_$API_KEY_ID.p8 \
          api_key_id:$API_KEY_ID \
          api_issuer_id:$API_ISSUER_ID \
          app_identifier:"${{ env.BUNDLE_IDENTIFIER }}" || echo "继续使用手动构建"
        
    - name: Build IPA
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        # 设置构建配置
        BUILD_CONFIG=${{ inputs.build_configuration || 'Release' }}
        
        # 清理之前的构建
        xcodebuild clean -workspace xdrip.xcworkspace -scheme xdrip
        
        # 构建应用
        xcodebuild archive \
          -workspace xdrip.xcworkspace \
          -scheme xdrip \
          -configuration $BUILD_CONFIG \
          -destination "generic/platform=iOS" \
          -archivePath "build/xdrip.xcarchive" \
          -allowProvisioningUpdates \
          -authenticationKeyPath ~/private_keys/AuthKey_$API_KEY_ID.p8 \
          -authenticationKeyID $API_KEY_ID \
          -authenticationKeyIssuerID $API_ISSUER_ID \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM=${{ env.DEVELOPER_TEAM_ID }}
          
        # 导出 IPA
        xcodebuild -exportArchive \
          -archivePath "build/xdrip.xcarchive" \
          -exportPath "build/ipa" \
          -exportOptionsPlist "ExportOptions.plist" \
          -allowProvisioningUpdates \
          -authenticationKeyPath ~/private_keys/AuthKey_$API_KEY_ID.p8 \
          -authenticationKeyID $API_KEY_ID \
          -authenticationKeyIssuerID $API_ISSUER_ID
          
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: xdrip-ipa-${{ github.sha }}
        path: build/ipa/*.ipa
        retention-days: 30
        
    - name: Upload to TestFlight
      if: ${{ inputs.upload_to_testflight == 'true' }}
      uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: build/ipa/*.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
      id: create_release
      
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/ipa/*.ipa
        asset_name: xdrip-${{ github.ref_name }}.ipa
        asset_content_type: application/octet-stream
